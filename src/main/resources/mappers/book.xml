<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.t1.bookDrop.repository.BookMapper">

    <resultMap id="CategoryResultMap" type="com.t1.bookDrop.entity.Category">
        <id property="categoryId" column="category_id"/>
        <result property="categoryName" column="category_name"/>
    </resultMap>

    <resultMap id="BookResultMap" type="com.t1.bookDrop.entity.Book">
        <id property="bookId" column="book_id" />
        <result property="isbn" column="isbn"/>
        <result property="categoryId" column="category_id"/>
        <result property="bookName" column="book_name"/>
        <result property="authorName" column="author_name"/>
        <result property="publisherName" column="publisher_name"/>
        <result property="coverImgUrl" column="cover_img_url"/>
        <result property="createDate" column="create_date"/>
        <result property="updateDate" column="update_date" />
        <result property="publishDate" column="publish_date" />
        <result property="averageRating" column="average_rating"/>
        <association property="category" resultMap="CategoryResultMap"/>
    </resultMap>

    <resultMap id="BookStockResultMap" type="com.t1.bookDrop.entity.BookStock">
        <id property="bookStockId" column="book_stock_id"/>
        <result property="bookId" column="book_id"/>
        <result property="loanStatus" column="loan_status"/>
        <result property="dueDate" column="due_date"/>
        <association property="loan" resultMap="LoanResultMap" />
    </resultMap>

    <resultMap id="LoanResultMap" type="com.t1.bookDrop.entity.Loan">
        <id property="loanId" column="latest_loan_id"/>
        <result property="userId" column="user_id"/>
        <result property="bookStockId" column="book_stock_id"/>
        <result property="loanDate" column="loan_date" />
        <result property="dueDate" column="due_date"/>
        <result property="returnDate" column="return_date"/>
        <result property="returnOrNot" column="return_or_not"/>
    </resultMap>


    <insert id="saveBook" parameterType="com.t1.bookDrop.entity.Book">
        insert into book_tb
        values(
            0,
            #{isbn},
            #{categoryId},
            #{bookName},
            #{authorName},
            #{publisherName},
            #{coverImgUrl},
            now(),
            now(),
            now()
        )
    </insert>
    <insert id="saveLoan" parameterType="com.t1.bookDrop.entity.Book">
        insert into loan_tb
        values(
            0,
            #{userId},
            #{bookStockId},
            now(),
            DATE_ADD(now(), INTERVAL 7 DAY),
            null,
            1
        )
    </insert>

    <select id="getBook" resultMap="BookResultMap"> <!-- 기능 확인 -->
        select
            bt.book_id,
            bt.isbn,
            bt.book_name,
            bt.author_name,
            bt.publisher_name,
            bt.cover_img_url,
            bt.create_date,
            bt.update_date,
            bt.publish_date,
            ct.category_name
<!--            rating, category_id, category_name 확인 필요-->
        from
            book_tb bt
            left outer join category_tb ct on(ct.category_id = bt.category_id)
        where
            bt.book_id = #{bookId}
    </select>

    <select id="findBooksAll" resultMap="BookResultMap">
        select
            bt.book_id,
            bt.isbn,
            bt.book_name,
            bt.author_name,
            bt.publisher_name,
            bt.cover_img_url,
            bt.create_date,
            bt.update_date,
            bt.publish_date,
            ct.category_name,
            temp_rating_tb.average_rating
        from
            book_tb bt
            left outer join category_tb ct on(ct.category_id = bt.category_id)
            left outer join (
                select
                    book_id,
                    avg(rating) as average_rating
                from
                    review_tb
                group by
                    book_id) temp_rating_tb on(temp_rating_tb.book_id = bt.book_id)
        where
        1 = 1
            <if test="option == 0">
                and (
                bt.book_name like concat("%", #{text}, "%")
                or bt.author_name like concat("%", #{text}, "%")
                or bt.publisher_name like concat("%", #{text}, "%")
                )
            </if>
            <if test="option == 1">
                and bt.book_name like concat("%", #{text}, "%")
            </if>
            <if test="option == 2">
                and bt.author_name like concat("%", #{text}, "%")
            </if>
            <if test="option == 3">
                and bt.publisher_name like concat("%", #{text}, "%")
            </if>
        order by
            <choose>
                <when test="filter == 0">
                    bt.book_id
                </when>
                <when test="filter == 1">
                    temp_rating_tb.average_rating DESC
                </when>
                <when test="filter == 2">
                    temp_rating_tb.average_rating
                </when>
                <when test="filter == 3">
                    temp_rating_tb.average_rating DESC
                </when>
                <when test="filter == 4">
                    temp_rating_tb.average_rating
                </when>
<!--                <otherwise>-->
<!--                    -->
<!--                </otherwise>-->
            </choose>
        limit #{index}, 20
    </select>

    <select id="getBookCount" resultType="integer">
        select
            count(*)
        from
            book_tb bt
            left outer join category_tb ct on (ct.category_id = bt.category_id)
        <choose>
            <when test="option == 0">
                where bt.book_name like concat('%', #{text}, '%')
                or bt.author_name like concat('%', #{text}, '%')
                or bt.publisher_name like concat('%', #{text}, '%')
            </when>
            <when test="option == 1">
                where bt.book_name like concat('%', #{text}, '%')
            </when>
            <when test="option == 2">
                where bt.author_name like concat('%', #{text}, '%')
            </when>
            <when test="option == 3">
                where bt.publisher_name like concat('%', #{text}, '%')
            </when>
        </choose>
    </select>

    <select id="findBookStocksByBookId" resultMap="BookStockResultMap">
        select
            bst.book_id,
            bst.book_stock_id,
            temp_loan_tb.user_id,
            temp_loan_tb.latest_loan_id,
            temp_loan_tb.loan_date,
            temp_loan_tb.due_date,
            temp_loan_tb.return_date,
            if(temp_loan_tb.latest_loan_id is null or temp_loan_tb.return_date is not null, 1, 2) as loan_status
        from
            book_stock_tb bst
            left outer join (
                select
                    max(loan_id) as latest_loan_id,
                    book_stock_id,
                    user_id,
                    loan_date,
                    due_date,
                    return_date
                from
                    loan_tb
                group by book_stock_id) temp_loan_tb on (temp_loan_tb.book_stock_id = bst.book_stock_id)
        where
            bst.book_id = #{bookId}
    </select>

    <delete id="deleteBookByBookIds" parameterType="list">
        delete
        from
            book_tb
        where
            book_id in (
                <foreach collection="bookIds" item="bookId" separator=",">
                    #{bookId}
                </foreach>
            )
    </delete>

    <update id="updateBookByBookId" parameterType="com.t1.bookDrop.entity.Book">
        update
            book_tb
        set
            isbn = #{isbn},
            category_id = #{categoryId},
            book_name  = #{bookName},
            author_name = #{authorName},
            publisher_name = #{publisherName},
            cover_img_url = #{coverImgUrl},
            update_date = now()
        where
            book_id = #{bookId}
    </update>

    <update id="updateReturnDate" parameterType="int">
        update
            loan_tb
        set
            return_date = now()
        where
            loan_id = #{loanId}
    </update>

    <select id="getPopularBooks" resultMap="BookResultMap">
        select
            bt.book_id,
            bt.isbn,
            ct.category_name,
            bt.book_name,
            bt.author_name,
            bt.publisher_name,
            bt.cover_img_url,
            bt.create_date,
            bt.update_date,
            bt.publish_date
        from
            book_tb bt
            left outer join category_tb ct on(ct.category_id = bt.category_id)
        ORDER BY
            book_name DESC
        LIMIT 5;
    </select>

    <select id="getTopFiveBooks" resultMap="BookResultMap">
        select
            bt.book_id,
            bt.isbn,
            ct.category_name,
            bt.book_name,
            bt.author_name,
            bt.publisher_name,
            bt.cover_img_url,
            bt.create_date,
            bt.update_date,
            bt.publish_date
        from
            book_tb bt
            left outer join category_tb ct on(ct.category_id = bt.category_id)
        ORDER BY
            RAND()
        LIMIT 5;
    </select>

    <select id="getNewBooks" resultMap="BookResultMap">
        SELECT
            bt.book_id,
            bt.isbn,
            ct.category_name,
            bt.book_name,
            bt.author_name,
            bt.publisher_name,
            bt.cover_img_url,
            bt.create_date,
            bt.update_date,
            bt.publish_date
        FROM
            book_tb bt
            left outer join category_tb ct on(ct.category_id = bt.category_id)
        ORDER BY
            bt.publish_date DESC,
            TIME(bt.publish_date) DESC
        LIMIT 10;
    </select>


























</mapper>