<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.t1.bookDrop.repository.MyPageMapper">

    <resultMap id="BookResultMap" type="com.t1.bookDrop.entity.Book">
        <id property="bookId" column="book_id" />
        <result property="isbn" column="isbn" />
        <result property="categoryId" column="category_id" />
        <result property="bookName" column="book_name" />
        <result property="authorName" column="author_name" />
        <result property="publisherName" column="publisher_name" />
        <result property="coverImgUrl" column="cover_img_url" />
        <result property="createDate" column="create_date" />
        <result property="updateDate" column="update_date" />
        <result property="publishDate" column="publish_date" />
    </resultMap>

    <resultMap id="BookStockResultMap" type="com.t1.bookDrop.entity.BookStock">
        <id property="bookStockId" column="book_stock_id"/>
        <result property="bookId" column="book_id"/>
    </resultMap>

    <resultMap id="loanResultMap" type="com.t1.bookDrop.entity.Loan">
        <id property="loanId" column="loan_id" />
        <result property="userId" column="user_id" />
        <result property="bookStockId" column="book_stock_id" />
        <result property="loanDate" column="loan_date" />
        <result property="dueDate" column="due_date" />
        <result property="returnDate" column="return_date" />
        <association property="book" resultMap="BookResultMap" />
    </resultMap>

    <resultMap id="WishResultMap" type="com.t1.bookDrop.entity.Wish">
        <id property="wishId" column="wish_id" />
        <result property="bookId" column="book_id" />
        <result property="userId" column="user_id" />
        <result property="reviewCount" column="review_count" />
        <result property="avgRating" column="average_rating" />
        <association property="book" resultMap="BookResultMap" />
    </resultMap>

    <update id="updateProfileImage">
        update
            user_tb
        set
            profile_url = #{url}
        where
            user_id = #{userid}
    </update>

    <select id="getReadingBooks" parameterType="int" resultMap="loanResultMap">
        select
            lt.loan_id,
            lt.user_id,
            lt.book_stock_id,
            bt.book_name,
            bt.author_name,
            bt.publisher_name,
            bt.cover_img_url,
            lt.loan_date,
            lt.due_date,
            lt.return_date
        from
            loan_tb lt
            left outer join user_tb ut on(ut.user_id = lt.user_id)
            left outer join book_stock_tb bst on(bst.book_stock_id = lt.book_stock_id)
            left outer join book_tb bt on(bt.book_id = bst.book_id)
        where
            ut.user_id = #{userid}
            and lt.return_date is null
        order by
            lt.due_date
        limit
            #{index}, 6;
    </select>

    <select id="getReadingBooksCount" resultType="int">
        select
            count(*)
        from
            loan_tb lt
            left outer join book_stock_tb bst on(bst.book_stock_id = lt.book_stock_id)
            left outer join book_tb bt on(bt.book_id = bst.book_id)
        where
            user_id = #{userid}
            and lt.return_date is null;
    </select>

    <select id="getReturnedBooks" parameterType="int" resultMap="loanResultMap">
        select
            lt.loan_id,
            lt.user_id,
            lt.book_stock_id,
            bt.book_name,
            bt.author_name,
            bt.publisher_name,
            bt.cover_img_url,
            lt.loan_date,
            lt.due_date,
            lt.return_date
        from
            loan_tb lt
            left outer join user_tb ut on(ut.user_id = lt.user_id)
            left outer join book_stock_tb bst on(bst.book_stock_id = lt.book_stock_id)
            left outer join book_tb bt on(bt.book_id = bst.book_id)
        where
            ut.user_id = #{userid}
            and lt.return_date is not null
            <if test="filter == 3">
                and lt.due_date > lt.return_date
            </if>
            <if test="filter == 4">
                and lt.return_date > lt.due_date
            </if>
        order by
            <choose>
                <when test="filter == 1">
                    lt.return_date DESC
                </when>
                <when test="filter == 2">
                    lt.return_date
                </when>
                <otherwise>
                    lt.loan_id
                </otherwise>
            </choose>
        limit
            #{index}, 6;
    </select>

    <select id="getReturnedBooksCount" resultType="int">
        select
            count(*)
        from
            loan_tb lt
            left outer join book_stock_tb bst on(bst.book_stock_id = lt.book_stock_id)
            left outer join book_tb bt on(bt.book_id = bst.book_id)
        where
            user_id = #{userid}
            and lt.return_date is not null
            <if test="filter == 3">
                and lt.due_date > lt.return_date
            </if>
            <if test="filter == 4">
                and lt.return_date > lt.due_date
            </if>
    </select>

    <select id="getWishList" parameterType="int" resultMap="WishResultMap">
        select
            wt.wish_id,
            bt.book_name,
            bt.author_name,
            bt.publisher_name,
            bt.cover_img_url,
            temp_rating_tb.average_rating,
            temp_rating_tb.review_count
        from
            wish_tb wt
            left outer join book_tb bt on(bt.book_id = wt.book_id)
            left outer join (
                select
                    book_id,
                    avg(rating) as average_rating,
                    count(*) as review_count
                from
                    review_tb
                group by
                    book_id) temp_rating_tb on(temp_rating_tb.book_id = bt.book_id)
        where
            user_id = #{userid}
        order by
            <choose>
                <when test="filter == 1">
                    wt.wish_id
                </when>
                <when test="filter == 2">
                    temp_rating_tb.average_rating DESC
                </when>
                <when test="filter == 3">
                    temp_rating_tb.average_rating
                </when>
                <when test="filter == 4">
                    temp_rating_tb.review_count DESC
                </when>
                <when test="filter == 5">
                    temp_rating_tb.review_count
                </when>
            </choose>
        limit
            #{index}, 6
    </select>

    <select id="getWishCount" resultType="int">
        select
            count(*)
        from
            wish_tb wt
            left outer join book_tb bt on(bt.book_id = wt.book_id)
        where
            user_id = #{userid}
    </select>

    <select id="getOverdueCount" resultType="int">
        SELECT
            COUNT(*) AS overdue_count
        FROM
            loan_tb
        WHERE
            user_id = #{userid}
            AND return_date > due_date
            AND return_date IS NOT NULL;
    </select>

    <select id="getReadingCount" resultType="int">
        SELECT
            COUNT(*) AS loan_count
        FROM
            loan_tb
        WHERE
            user_id = #{userid}
            AND return_date IS NULL;
    </select>

    <select id="getReturnedCount" resultType="int">
        SELECT
            COUNT(*) AS returned_count
        FROM
            loan_tb
        WHERE
            user_id = #{userid}
            AND return_date IS NOT NULL;
    </select>

    <select id="getFavoriteInfo" resultType="com.t1.bookDrop.entity.FavoriteCategory">
        select
            COUNT(*) as count,
            ct.category_name as name
        from
            loan_tb lt
            left outer join book_stock_tb bst on(bst.book_stock_id = lt.book_stock_id)
            left outer join book_tb bt on(bt.book_id = bst.book_id)
            left outer join category_tb ct on(ct.category_id = bt.category_id)
        where
            lt.user_id = #{userid}
        group by
            name
        order by
            count DESC
        LIMIT 1;
    </select>

    <select id="getMostLoanedInfo" resultType="com.t1.bookDrop.entity.MostLoanedBook">
        select
            COUNT(*) as count,
            ct.category_name as categoryName,
            bt.book_name as bookName,
            bt.author_name as authorName,
            bt.publisher_name as publisherName,
            bt.cover_img_url as url
        from
            loan_tb lt
            left outer join book_stock_tb bst on(bst.book_stock_id = lt.book_stock_id)
            left outer join book_tb bt on(bt.book_id = bst.book_id)
            left outer join category_tb ct on(ct.category_id = bt.category_id)
        where
            lt.user_id = #{userid}
        group by
            bt.book_id
        order by
            count DESC
        LIMIT 1;
    </select>

</mapper>